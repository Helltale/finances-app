// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список счетов
	// (GET /accounts)
	GetAccounts(c *gin.Context, params GetAccountsParams)
	// Создать счет
	// (POST /accounts)
	PostAccounts(c *gin.Context)
	// Удалить счет
	// (DELETE /accounts/{id})
	DeleteAccountsId(c *gin.Context, id ID)
	// Получить счет по ID
	// (GET /accounts/{id})
	GetAccountsId(c *gin.Context, id ID)
	// Обновить счет
	// (PUT /accounts/{id})
	PutAccountsId(c *gin.Context, id ID)
	// Баланс по счетам
	// (GET /analytics/accounts-balance)
	GetAnalyticsAccountsBalance(c *gin.Context)
	// Расходы по категориям
	// (GET /analytics/expenses-by-category)
	GetAnalyticsExpensesByCategory(c *gin.Context, params GetAnalyticsExpensesByCategoryParams)
	// Тренд доходов и расходов
	// (GET /analytics/income-expense-trend)
	GetAnalyticsIncomeExpenseTrend(c *gin.Context, params GetAnalyticsIncomeExpenseTrendParams)
	// Общий обзор финансов
	// (GET /analytics/overview)
	GetAnalyticsOverview(c *gin.Context, params GetAnalyticsOverviewParams)
	// Вход в систему
	// (POST /auth/login)
	PostAuthLogin(c *gin.Context)
	// Регистрация
	// (POST /auth/register)
	PostAuthRegister(c *gin.Context)
	// Получить список бюджетов
	// (GET /budgets)
	GetBudgets(c *gin.Context, params GetBudgetsParams)
	// Создать бюджет
	// (POST /budgets)
	PostBudgets(c *gin.Context)
	// Удалить бюджет
	// (DELETE /budgets/{id})
	DeleteBudgetsId(c *gin.Context, id ID)
	// Получить бюджет по ID
	// (GET /budgets/{id})
	GetBudgetsId(c *gin.Context, id ID)
	// Обновить бюджет
	// (PUT /budgets/{id})
	PutBudgetsId(c *gin.Context, id ID)
	// Получить список категорий
	// (GET /categories)
	GetCategories(c *gin.Context, params GetCategoriesParams)
	// Создать категорию
	// (POST /categories)
	PostCategories(c *gin.Context)
	// Удалить категорию
	// (DELETE /categories/{id})
	DeleteCategoriesId(c *gin.Context, id ID)
	// Получить категорию по ID
	// (GET /categories/{id})
	GetCategoriesId(c *gin.Context, id ID)
	// Создать семью
	// (POST /families)
	PostFamilies(c *gin.Context)
	// Получить текущую семью
	// (GET /families/current)
	GetFamiliesCurrent(c *gin.Context)
	// Получить список целей
	// (GET /goals)
	GetGoals(c *gin.Context, params GetGoalsParams)
	// Создать цель
	// (POST /goals)
	PostGoals(c *gin.Context)
	// Удалить цель
	// (DELETE /goals/{id})
	DeleteGoalsId(c *gin.Context, id ID)
	// Получить цель по ID
	// (GET /goals/{id})
	GetGoalsId(c *gin.Context, id ID)
	// Обновить цель
	// (PUT /goals/{id})
	PutGoalsId(c *gin.Context, id ID)
	// Пополнить цель
	// (POST /goals/{id}/contribute)
	PostGoalsIdContribute(c *gin.Context, id ID)
	// Получить список транзакций
	// (GET /transactions)
	GetTransactions(c *gin.Context, params GetTransactionsParams)
	// Создать транзакцию
	// (POST /transactions)
	PostTransactions(c *gin.Context)
	// Удалить транзакцию
	// (DELETE /transactions/{id})
	DeleteTransactionsId(c *gin.Context, id ID)
	// Получить транзакцию по ID
	// (GET /transactions/{id})
	GetTransactionsId(c *gin.Context, id ID)
	// Обновить транзакцию
	// (PUT /transactions/{id})
	PutTransactionsId(c *gin.Context, id ID)
	// Получить список пользователей семьи
	// (GET /users)
	GetUsers(c *gin.Context, params GetUsersParams)
	// Получить пользователя по ID
	// (GET /users/{id})
	GetUsersId(c *gin.Context, id ID)
	// Обновить пользователя
	// (PUT /users/{id})
	PutUsersId(c *gin.Context, id ID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetAccounts(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccounts(c, params)
}

// PostAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostAccounts(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAccounts(c)
}

// DeleteAccountsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccountsId(c, id)
}

// GetAccountsId operation middleware
func (siw *ServerInterfaceWrapper) GetAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccountsId(c, id)
}

// PutAccountsId operation middleware
func (siw *ServerInterfaceWrapper) PutAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAccountsId(c, id)
}

// GetAnalyticsAccountsBalance operation middleware
func (siw *ServerInterfaceWrapper) GetAnalyticsAccountsBalance(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAnalyticsAccountsBalance(c)
}

// GetAnalyticsExpensesByCategory operation middleware
func (siw *ServerInterfaceWrapper) GetAnalyticsExpensesByCategory(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalyticsExpensesByCategoryParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAnalyticsExpensesByCategory(c, params)
}

// GetAnalyticsIncomeExpenseTrend operation middleware
func (siw *ServerInterfaceWrapper) GetAnalyticsIncomeExpenseTrend(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalyticsIncomeExpenseTrendParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", c.Request.URL.Query(), &params.Period)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter period: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAnalyticsIncomeExpenseTrend(c, params)
}

// GetAnalyticsOverview operation middleware
func (siw *ServerInterfaceWrapper) GetAnalyticsOverview(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalyticsOverviewParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAnalyticsOverview(c, params)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogin(c)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRegister(c)
}

// GetBudgets operation middleware
func (siw *ServerInterfaceWrapper) GetBudgets(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBudgetsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", c.Request.URL.Query(), &params.Period)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter period: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", c.Request.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBudgets(c, params)
}

// PostBudgets operation middleware
func (siw *ServerInterfaceWrapper) PostBudgets(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBudgets(c)
}

// DeleteBudgetsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBudgetsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBudgetsId(c, id)
}

// GetBudgetsId operation middleware
func (siw *ServerInterfaceWrapper) GetBudgetsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBudgetsId(c, id)
}

// PutBudgetsId operation middleware
func (siw *ServerInterfaceWrapper) PutBudgetsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBudgetsId(c, id)
}

// GetCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCategories(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoriesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "parent_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent_id", c.Request.URL.Query(), &params.ParentId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter parent_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategories(c, params)
}

// PostCategories operation middleware
func (siw *ServerInterfaceWrapper) PostCategories(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCategories(c)
}

// DeleteCategoriesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategoriesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCategoriesId(c, id)
}

// GetCategoriesId operation middleware
func (siw *ServerInterfaceWrapper) GetCategoriesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategoriesId(c, id)
}

// PostFamilies operation middleware
func (siw *ServerInterfaceWrapper) PostFamilies(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostFamilies(c)
}

// GetFamiliesCurrent operation middleware
func (siw *ServerInterfaceWrapper) GetFamiliesCurrent(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFamiliesCurrent(c)
}

// GetGoals operation middleware
func (siw *ServerInterfaceWrapper) GetGoals(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGoalsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "is_completed" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_completed", c.Request.URL.Query(), &params.IsCompleted)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter is_completed: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGoals(c, params)
}

// PostGoals operation middleware
func (siw *ServerInterfaceWrapper) PostGoals(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGoals(c)
}

// DeleteGoalsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGoalsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGoalsId(c, id)
}

// GetGoalsId operation middleware
func (siw *ServerInterfaceWrapper) GetGoalsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGoalsId(c, id)
}

// PutGoalsId operation middleware
func (siw *ServerInterfaceWrapper) PutGoalsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutGoalsId(c, id)
}

// PostGoalsIdContribute operation middleware
func (siw *ServerInterfaceWrapper) PostGoalsIdContribute(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGoalsIdContribute(c, id)
}

// GetTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetTransactions(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", c.Request.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", c.Request.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactions(c, params)
}

// PostTransactions operation middleware
func (siw *ServerInterfaceWrapper) PostTransactions(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTransactions(c)
}

// DeleteTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTransactionsId(c, id)
}

// GetTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactionsId(c, id)
}

// PutTransactionsId operation middleware
func (siw *ServerInterfaceWrapper) PutTransactionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTransactionsId(c, id)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c, params)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersId(c, id)
}

// PutUsersId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accounts", wrapper.GetAccounts)
	router.POST(options.BaseURL+"/accounts", wrapper.PostAccounts)
	router.DELETE(options.BaseURL+"/accounts/:id", wrapper.DeleteAccountsId)
	router.GET(options.BaseURL+"/accounts/:id", wrapper.GetAccountsId)
	router.PUT(options.BaseURL+"/accounts/:id", wrapper.PutAccountsId)
	router.GET(options.BaseURL+"/analytics/accounts-balance", wrapper.GetAnalyticsAccountsBalance)
	router.GET(options.BaseURL+"/analytics/expenses-by-category", wrapper.GetAnalyticsExpensesByCategory)
	router.GET(options.BaseURL+"/analytics/income-expense-trend", wrapper.GetAnalyticsIncomeExpenseTrend)
	router.GET(options.BaseURL+"/analytics/overview", wrapper.GetAnalyticsOverview)
	router.POST(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(options.BaseURL+"/budgets", wrapper.GetBudgets)
	router.POST(options.BaseURL+"/budgets", wrapper.PostBudgets)
	router.DELETE(options.BaseURL+"/budgets/:id", wrapper.DeleteBudgetsId)
	router.GET(options.BaseURL+"/budgets/:id", wrapper.GetBudgetsId)
	router.PUT(options.BaseURL+"/budgets/:id", wrapper.PutBudgetsId)
	router.GET(options.BaseURL+"/categories", wrapper.GetCategories)
	router.POST(options.BaseURL+"/categories", wrapper.PostCategories)
	router.DELETE(options.BaseURL+"/categories/:id", wrapper.DeleteCategoriesId)
	router.GET(options.BaseURL+"/categories/:id", wrapper.GetCategoriesId)
	router.POST(options.BaseURL+"/families", wrapper.PostFamilies)
	router.GET(options.BaseURL+"/families/current", wrapper.GetFamiliesCurrent)
	router.GET(options.BaseURL+"/goals", wrapper.GetGoals)
	router.POST(options.BaseURL+"/goals", wrapper.PostGoals)
	router.DELETE(options.BaseURL+"/goals/:id", wrapper.DeleteGoalsId)
	router.GET(options.BaseURL+"/goals/:id", wrapper.GetGoalsId)
	router.PUT(options.BaseURL+"/goals/:id", wrapper.PutGoalsId)
	router.POST(options.BaseURL+"/goals/:id/contribute", wrapper.PostGoalsIdContribute)
	router.GET(options.BaseURL+"/transactions", wrapper.GetTransactions)
	router.POST(options.BaseURL+"/transactions", wrapper.PostTransactions)
	router.DELETE(options.BaseURL+"/transactions/:id", wrapper.DeleteTransactionsId)
	router.GET(options.BaseURL+"/transactions/:id", wrapper.GetTransactionsId)
	router.PUT(options.BaseURL+"/transactions/:id", wrapper.PutTransactionsId)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUsersId)
	router.PUT(options.BaseURL+"/users/:id", wrapper.PutUsersId)
}
