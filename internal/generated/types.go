// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AccountType.
const (
	Card       AccountType = "card"
	Cash       AccountType = "cash"
	Investment AccountType = "investment"
	Savings    AccountType = "savings"
)

// Defines values for BudgetPeriod.
const (
	BudgetPeriodMonthly BudgetPeriod = "monthly"
	BudgetPeriodWeekly  BudgetPeriod = "weekly"
	BudgetPeriodYearly  BudgetPeriod = "yearly"
)

// Defines values for CategoryType.
const (
	CategoryTypeExpense CategoryType = "expense"
	CategoryTypeIncome  CategoryType = "income"
)

// Defines values for Currency.
const (
	EUR Currency = "EUR"
	RUB Currency = "RUB"
	USD Currency = "USD"
)

// Defines values for RecurringFreq.
const (
	RecurringFreqDaily   RecurringFreq = "daily"
	RecurringFreqMonthly RecurringFreq = "monthly"
	RecurringFreqWeekly  RecurringFreq = "weekly"
	RecurringFreqYearly  RecurringFreq = "yearly"
)

// Defines values for TransactionType.
const (
	TransactionTypeExpense  TransactionType = "expense"
	TransactionTypeIncome   TransactionType = "income"
	TransactionTypeTransfer TransactionType = "transfer"
)

// Defines values for UserRole.
const (
	Admin  UserRole = "admin"
	Member UserRole = "member"
)

// Defines values for GetAnalyticsIncomeExpenseTrendParamsPeriod.
const (
	Day   GetAnalyticsIncomeExpenseTrendParamsPeriod = "day"
	Month GetAnalyticsIncomeExpenseTrendParamsPeriod = "month"
	Week  GetAnalyticsIncomeExpenseTrendParamsPeriod = "week"
	Year  GetAnalyticsIncomeExpenseTrendParamsPeriod = "year"
)

// Account defines model for Account.
type Account struct {
	Balance   string      `json:"balance"`
	CreatedAt time.Time   `json:"created_at"`
	Currency  Currency    `json:"currency"`
	FamilyId  ID          `json:"family_id"`
	Id        ID          `json:"id"`
	IsActive  bool        `json:"is_active"`
	Name      string      `json:"name"`
	Type      AccountType `json:"type"`
	UpdatedAt time.Time   `json:"updated_at"`
	User      *User       `json:"user,omitempty"`
	UserId    ID          `json:"user_id"`
}

// AccountType defines model for AccountType.
type AccountType string

// AccountsList defines model for AccountsList.
type AccountsList struct {
	Data []Account      `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// Budget defines model for Budget.
type Budget struct {
	Amount          string       `json:"amount"`
	Category        *Category    `json:"category,omitempty"`
	CategoryId      *ID          `json:"category_id,omitempty"`
	CreatedAt       time.Time    `json:"created_at"`
	EndDate         time.Time    `json:"end_date"`
	FamilyId        ID           `json:"family_id"`
	Id              ID           `json:"id"`
	IsActive        bool         `json:"is_active"`
	Name            string       `json:"name"`
	Period          BudgetPeriod `json:"period"`
	ProgressPercent *float32     `json:"progress_percent,omitempty"`
	Remaining       *string      `json:"remaining,omitempty"`
	Spent           string       `json:"spent"`
	StartDate       time.Time    `json:"start_date"`
	UpdatedAt       time.Time    `json:"updated_at"`
}

// BudgetPeriod defines model for BudgetPeriod.
type BudgetPeriod string

// BudgetsList defines model for BudgetsList.
type BudgetsList struct {
	Data []Budget       `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// CategoriesList defines model for CategoriesList.
type CategoriesList struct {
	Data []Category     `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// Category defines model for Category.
type Category struct {
	Children  *[]Category  `json:"children,omitempty"`
	Color     string       `json:"color"`
	CreatedAt time.Time    `json:"created_at"`
	FamilyId  ID           `json:"family_id"`
	Icon      *string      `json:"icon,omitempty"`
	Id        ID           `json:"id"`
	IsActive  bool         `json:"is_active"`
	Name      string       `json:"name"`
	Parent    *Category    `json:"parent,omitempty"`
	ParentId  *ID          `json:"parent_id,omitempty"`
	Type      CategoryType `json:"type"`
	UpdatedAt time.Time    `json:"updated_at"`
}

// CategoryType defines model for CategoryType.
type CategoryType string

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Balance  *string     `json:"balance,omitempty"`
	Currency *Currency   `json:"currency,omitempty"`
	Name     string      `json:"name"`
	Type     AccountType `json:"type"`
	UserId   ID          `json:"user_id"`
}

// CreateBudgetRequest defines model for CreateBudgetRequest.
type CreateBudgetRequest struct {
	Amount     string       `json:"amount"`
	CategoryId *ID          `json:"category_id,omitempty"`
	EndDate    time.Time    `json:"end_date"`
	Name       string       `json:"name"`
	Period     BudgetPeriod `json:"period"`
	StartDate  time.Time    `json:"start_date"`
}

// CreateCategoryRequest defines model for CreateCategoryRequest.
type CreateCategoryRequest struct {
	Color    *string      `json:"color,omitempty"`
	Icon     *string      `json:"icon,omitempty"`
	Name     string       `json:"name"`
	ParentId *ID          `json:"parent_id,omitempty"`
	Type     CategoryType `json:"type"`
}

// CreateFamilyRequest defines model for CreateFamilyRequest.
type CreateFamilyRequest struct {
	Currency *Currency `json:"currency,omitempty"`
	Name     string    `json:"name"`
}

// CreateGoalRequest defines model for CreateGoalRequest.
type CreateGoalRequest struct {
	Name         string     `json:"name"`
	TargetAmount string     `json:"target_amount"`
	TargetDate   *time.Time `json:"target_date,omitempty"`
}

// CreateTransactionRequest defines model for CreateTransactionRequest.
type CreateTransactionRequest struct {
	AccountId   ID              `json:"account_id"`
	Amount      string          `json:"amount"`
	CategoryId  *ID             `json:"category_id,omitempty"`
	Date        time.Time       `json:"date"`
	Description *string         `json:"description,omitempty"`
	Tags        *[]string       `json:"tags,omitempty"`
	ToAccountId *ID             `json:"to_account_id,omitempty"`
	Type        TransactionType `json:"type"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email    openapi_types.Email `json:"email"`
	FamilyId *ID                 `json:"family_id,omitempty"`
	Name     string              `json:"name"`
	Password string              `json:"password"`
}

// Currency defines model for Currency.
type Currency string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *map[string]interface{} `json:"details,omitempty"`
	Error   string                  `json:"error"`
	Message string                  `json:"message"`
}

// Family defines model for Family.
type Family struct {
	CreatedAt time.Time `json:"created_at"`
	Currency  Currency  `json:"currency"`
	Id        ID        `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
	Users     *[]User   `json:"users,omitempty"`
}

// Goal defines model for Goal.
type Goal struct {
	CreatedAt       time.Time  `json:"created_at"`
	CurrentAmount   string     `json:"current_amount"`
	FamilyId        ID         `json:"family_id"`
	Id              ID         `json:"id"`
	IsCompleted     bool       `json:"is_completed"`
	Name            string     `json:"name"`
	ProgressPercent *float32   `json:"progress_percent,omitempty"`
	RemainingAmount *string    `json:"remaining_amount,omitempty"`
	TargetAmount    string     `json:"target_amount"`
	TargetDate      *time.Time `json:"target_date,omitempty"`
	UpdatedAt       time.Time  `json:"updated_at"`
}

// GoalsList defines model for GoalsList.
type GoalsList struct {
	Data []Goal         `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// ID defines model for ID.
type ID = int64

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	Page       int `json:"page"`
	PerPage    int `json:"per_page"`
	Total      int `json:"total"`
	TotalPages int `json:"total_pages"`
}

// RecurringFreq defines model for RecurringFreq.
type RecurringFreq string

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Account     *Account        `json:"account,omitempty"`
	AccountId   ID              `json:"account_id"`
	Amount      string          `json:"amount"`
	Category    *Category       `json:"category,omitempty"`
	CategoryId  *ID             `json:"category_id,omitempty"`
	CreatedAt   time.Time       `json:"created_at"`
	Date        time.Time       `json:"date"`
	Description *string         `json:"description,omitempty"`
	Id          ID              `json:"id"`
	Receipt     *string         `json:"receipt,omitempty"`
	RecurringId *ID             `json:"recurring_id,omitempty"`
	Tags        *[]string       `json:"tags,omitempty"`
	ToAccount   *Account        `json:"to_account,omitempty"`
	ToAccountId *ID             `json:"to_account_id,omitempty"`
	Type        TransactionType `json:"type"`
	UpdatedAt   time.Time       `json:"updated_at"`
	User        *User           `json:"user,omitempty"`
	UserId      ID              `json:"user_id"`
}

// TransactionType defines model for TransactionType.
type TransactionType string

// TransactionsList defines model for TransactionsList.
type TransactionsList struct {
	Data []Transaction  `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// UpdateAccountRequest defines model for UpdateAccountRequest.
type UpdateAccountRequest struct {
	IsActive *bool   `json:"is_active,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// UpdateTransactionRequest defines model for UpdateTransactionRequest.
type UpdateTransactionRequest struct {
	Amount      *string    `json:"amount,omitempty"`
	CategoryId  *ID        `json:"category_id,omitempty"`
	Date        *time.Time `json:"date,omitempty"`
	Description *string    `json:"description,omitempty"`
	Tags        *[]string  `json:"tags,omitempty"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Name *string   `json:"name,omitempty"`
	Role *UserRole `json:"role,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"created_at"`
	Email     openapi_types.Email `json:"email"`
	Family    *Family             `json:"family,omitempty"`
	FamilyId  *ID                 `json:"family_id,omitempty"`
	Id        ID                  `json:"id"`
	Name      string              `json:"name"`
	Role      UserRole            `json:"role"`
	UpdatedAt time.Time           `json:"updated_at"`
}

// UserRole defines model for UserRole.
type UserRole string

// UsersList defines model for UsersList.
type UsersList struct {
	Data []User         `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// DateFromParam defines model for DateFromParam.
type DateFromParam = openapi_types.Date

// DateToParam defines model for DateToParam.
type DateToParam = openapi_types.Date

// PageParam defines model for PageParam.
type PageParam = int

// PerPageParam defines model for PerPageParam.
type PerPageParam = int

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Page Номер страницы
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Количество элементов на странице
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// UserId Фильтр по пользователю
	UserId *ID `form:"user_id,omitempty" json:"user_id,omitempty"`

	// Type Фильтр по типу счета
	Type *AccountType `form:"type,omitempty" json:"type,omitempty"`
}

// GetAnalyticsExpensesByCategoryParams defines parameters for GetAnalyticsExpensesByCategory.
type GetAnalyticsExpensesByCategoryParams struct {
	// DateFrom Дата начала периода
	DateFrom *DateFromParam `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Дата окончания периода
	DateTo *DateToParam `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Limit Количество категорий
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAnalyticsIncomeExpenseTrendParams defines parameters for GetAnalyticsIncomeExpenseTrend.
type GetAnalyticsIncomeExpenseTrendParams struct {
	// DateFrom Дата начала периода
	DateFrom *DateFromParam `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Дата окончания периода
	DateTo *DateToParam `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Period Период группировки
	Period *GetAnalyticsIncomeExpenseTrendParamsPeriod `form:"period,omitempty" json:"period,omitempty"`
}

// GetAnalyticsIncomeExpenseTrendParamsPeriod defines parameters for GetAnalyticsIncomeExpenseTrend.
type GetAnalyticsIncomeExpenseTrendParamsPeriod string

// GetAnalyticsOverviewParams defines parameters for GetAnalyticsOverview.
type GetAnalyticsOverviewParams struct {
	// DateFrom Дата начала периода
	DateFrom *DateFromParam `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Дата окончания периода
	DateTo *DateToParam `form:"date_to,omitempty" json:"date_to,omitempty"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// GetBudgetsParams defines parameters for GetBudgets.
type GetBudgetsParams struct {
	// Page Номер страницы
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Количество элементов на странице
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Period Фильтр по периоду
	Period *BudgetPeriod `form:"period,omitempty" json:"period,omitempty"`

	// CategoryId Фильтр по категории
	CategoryId *ID `form:"category_id,omitempty" json:"category_id,omitempty"`
}

// GetCategoriesParams defines parameters for GetCategories.
type GetCategoriesParams struct {
	// Page Номер страницы
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Количество элементов на странице
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Type Фильтр по типу категории
	Type *CategoryType `form:"type,omitempty" json:"type,omitempty"`

	// ParentId Фильтр по родительской категории
	ParentId *ID `form:"parent_id,omitempty" json:"parent_id,omitempty"`
}

// GetGoalsParams defines parameters for GetGoals.
type GetGoalsParams struct {
	// Page Номер страницы
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Количество элементов на странице
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// IsCompleted Фильтр по статусу выполнения
	IsCompleted *bool `form:"is_completed,omitempty" json:"is_completed,omitempty"`
}

// PostGoalsIdContributeJSONBody defines parameters for PostGoalsIdContribute.
type PostGoalsIdContributeJSONBody struct {
	Amount      string  `json:"amount"`
	Description *string `json:"description,omitempty"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	// Page Номер страницы
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Количество элементов на странице
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// DateFrom Дата начала периода
	DateFrom *DateFromParam `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Дата окончания периода
	DateTo *DateToParam `form:"date_to,omitempty" json:"date_to,omitempty"`

	// AccountId Фильтр по счету
	AccountId *ID `form:"account_id,omitempty" json:"account_id,omitempty"`

	// CategoryId Фильтр по категории
	CategoryId *ID `form:"category_id,omitempty" json:"category_id,omitempty"`

	// Type Фильтр по типу транзакции
	Type *TransactionType `form:"type,omitempty" json:"type,omitempty"`

	// UserId Фильтр по пользователю
	UserId *ID `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page Номер страницы
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Количество элементов на странице
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PostAccountsJSONRequestBody defines body for PostAccounts for application/json ContentType.
type PostAccountsJSONRequestBody = CreateAccountRequest

// PutAccountsIdJSONRequestBody defines body for PutAccountsId for application/json ContentType.
type PutAccountsIdJSONRequestBody = UpdateAccountRequest

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = CreateUserRequest

// PostBudgetsJSONRequestBody defines body for PostBudgets for application/json ContentType.
type PostBudgetsJSONRequestBody = CreateBudgetRequest

// PutBudgetsIdJSONRequestBody defines body for PutBudgetsId for application/json ContentType.
type PutBudgetsIdJSONRequestBody = CreateBudgetRequest

// PostCategoriesJSONRequestBody defines body for PostCategories for application/json ContentType.
type PostCategoriesJSONRequestBody = CreateCategoryRequest

// PostFamiliesJSONRequestBody defines body for PostFamilies for application/json ContentType.
type PostFamiliesJSONRequestBody = CreateFamilyRequest

// PostGoalsJSONRequestBody defines body for PostGoals for application/json ContentType.
type PostGoalsJSONRequestBody = CreateGoalRequest

// PutGoalsIdJSONRequestBody defines body for PutGoalsId for application/json ContentType.
type PutGoalsIdJSONRequestBody = CreateGoalRequest

// PostGoalsIdContributeJSONRequestBody defines body for PostGoalsIdContribute for application/json ContentType.
type PostGoalsIdContributeJSONRequestBody PostGoalsIdContributeJSONBody

// PostTransactionsJSONRequestBody defines body for PostTransactions for application/json ContentType.
type PostTransactionsJSONRequestBody = CreateTransactionRequest

// PutTransactionsIdJSONRequestBody defines body for PutTransactionsId for application/json ContentType.
type PutTransactionsIdJSONRequestBody = UpdateTransactionRequest

// PutUsersIdJSONRequestBody defines body for PutUsersId for application/json ContentType.
type PutUsersIdJSONRequestBody = UpdateUserRequest
