openapi: 3.0.3
info:
  title: Family Finance API
  version: 1.0.0
  description: API для учета семейных финансов
  contact:
    name: Family Finance Team
    email: support@familyfinance.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Базовые типы
    ID:
      type: integer
      format: int64
      minimum: 1

    Currency:
      type: string
      enum: [RUB, USD, EUR]
      default: RUB

    UserRole:
      type: string
      enum: [admin, member]
      default: member

    AccountType:
      type: string
      enum: [cash, card, savings, investment]

    TransactionType:
      type: string
      enum: [income, expense, transfer]

    CategoryType:
      type: string
      enum: [income, expense]

    BudgetPeriod:
      type: string
      enum: [weekly, monthly, yearly]

    RecurringFreq:
      type: string
      enum: [daily, weekly, monthly, yearly]

    # Основные сущности
    User:
      type: object
      required:
        - id
        - email
        - name
        - role
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        email:
          type: string
          format: email
        name:
          type: string
          minLength: 1
          maxLength: 100
        family_id:
          $ref: '#/components/schemas/ID'
        role:
          $ref: '#/components/schemas/UserRole'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        family:
          $ref: '#/components/schemas/Family'

    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
          minLength: 1
          maxLength: 100
        family_id:
          $ref: '#/components/schemas/ID'

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        role:
          $ref: '#/components/schemas/UserRole'

    Family:
      type: object
      required:
        - id
        - name
        - currency
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 100
        currency:
          $ref: '#/components/schemas/Currency'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    CreateFamilyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        currency:
          $ref: '#/components/schemas/Currency'

    Account:
      type: object
      required:
        - id
        - name
        - type
        - balance
        - currency
        - user_id
        - family_id
        - is_active
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 100
        type:
          $ref: '#/components/schemas/AccountType'
        balance:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
          example: "1000.50"
        currency:
          $ref: '#/components/schemas/Currency'
        user_id:
          $ref: '#/components/schemas/ID'
        family_id:
          $ref: '#/components/schemas/ID'
        is_active:
          type: boolean
          default: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    CreateAccountRequest:
      type: object
      required:
        - name
        - type
        - user_id
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        type:
          $ref: '#/components/schemas/AccountType'
        balance:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
          default: "0.00"
        currency:
          $ref: '#/components/schemas/Currency'
        user_id:
          $ref: '#/components/schemas/ID'

    UpdateAccountRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        is_active:
          type: boolean

    Category:
      type: object
      required:
        - id
        - name
        - type
        - family_id
        - color
        - is_active
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 100
        type:
          $ref: '#/components/schemas/CategoryType'
        parent_id:
          $ref: '#/components/schemas/ID'
        family_id:
          $ref: '#/components/schemas/ID'
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          default: "#6B7280"
        icon:
          type: string
          maxLength: 50
        is_active:
          type: boolean
          default: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        parent:
          $ref: '#/components/schemas/Category'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    CreateCategoryRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        type:
          $ref: '#/components/schemas/CategoryType'
        parent_id:
          $ref: '#/components/schemas/ID'
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        icon:
          type: string
          maxLength: 50

    Transaction:
      type: object
      required:
        - id
        - amount
        - date
        - type
        - account_id
        - user_id
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
          example: "150.75"
        description:
          type: string
          maxLength: 500
        date:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/TransactionType'
        account_id:
          $ref: '#/components/schemas/ID'
        category_id:
          $ref: '#/components/schemas/ID'
        user_id:
          $ref: '#/components/schemas/ID'
        to_account_id:
          $ref: '#/components/schemas/ID'
        recurring_id:
          $ref: '#/components/schemas/ID'
        tags:
          type: array
          items:
            type: string
        receipt:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        account:
          $ref: '#/components/schemas/Account'
        to_account:
          $ref: '#/components/schemas/Account'
        category:
          $ref: '#/components/schemas/Category'
        user:
          $ref: '#/components/schemas/User'

    CreateTransactionRequest:
      type: object
      required:
        - amount
        - date
        - type
        - account_id
      properties:
        amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        description:
          type: string
          maxLength: 500
        date:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/TransactionType'
        account_id:
          $ref: '#/components/schemas/ID'
        category_id:
          $ref: '#/components/schemas/ID'
        to_account_id:
          $ref: '#/components/schemas/ID'
        tags:
          type: array
          items:
            type: string

    UpdateTransactionRequest:
      type: object
      properties:
        amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        description:
          type: string
          maxLength: 500
        date:
          type: string
          format: date-time
        category_id:
          $ref: '#/components/schemas/ID'
        tags:
          type: array
          items:
            type: string

    Budget:
      type: object
      required:
        - id
        - name
        - amount
        - spent
        - period
        - start_date
        - end_date
        - family_id
        - is_active
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 100
        amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        spent:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        period:
          $ref: '#/components/schemas/BudgetPeriod'
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        category_id:
          $ref: '#/components/schemas/ID'
        family_id:
          $ref: '#/components/schemas/ID'
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/Category'
        remaining:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
          readOnly: true
        progress_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
          readOnly: true

    CreateBudgetRequest:
      type: object
      required:
        - name
        - amount
        - period
        - start_date
        - end_date
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        period:
          $ref: '#/components/schemas/BudgetPeriod'
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        category_id:
          $ref: '#/components/schemas/ID'

    Goal:
      type: object
      required:
        - id
        - name
        - target_amount
        - current_amount
        - family_id
        - is_completed
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 100
        target_amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        current_amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        target_date:
          type: string
          format: date-time
        family_id:
          $ref: '#/components/schemas/ID'
        is_completed:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        progress_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
          readOnly: true
        remaining_amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
          readOnly: true

    CreateGoalRequest:
      type: object
      required:
        - name
        - target_amount
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        target_amount:
          type: string
          pattern: '^-?\d+(\.\d{1,2})?$'
        target_date:
          type: string
          format: date-time

    # Общие ответы
    PaginationMeta:
      type: object
      required:
        - page
        - per_page
        - total
        - total_pages
      properties:
        page:
          type: integer
          minimum: 1
        per_page:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0
        total_pages:
          type: integer
          minimum: 0

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string

    # Списки с пагинацией
    UsersList:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    AccountsList:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    TransactionsList:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CategoriesList:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    BudgetsList:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Budget'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    GoalsList:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Goal'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

  parameters:
    PageParam:
      name: page
      in: query
      description: Номер страницы
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    PerPageParam:
      name: per_page
      in: query
      description: Количество элементов на странице
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    DateFromParam:
      name: date_from
      in: query
      description: Дата начала периода
      required: false
      schema:
        type: string
        format: date

    DateToParam:
      name: date_to
      in: query
      description: Дата окончания периода
      required: false
      schema:
        type: string
        format: date

security:
  - BearerAuth: []

paths:
  # Аутентификация
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Вход в систему
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Регистрация
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Пользователи
  /users:
    get:
      tags:
        - Users
      summary: Получить список пользователей семьи
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersList'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Получить пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Обновить пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Семьи
  /families:
    post:
      tags:
        - Families
      summary: Создать семью
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFamilyRequest'
      responses:
        '201':
          description: Семья создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'

  /families/current:
    get:
      tags:
        - Families
      summary: Получить текущую семью
      responses:
        '200':
          description: Данные семьи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'

  # Счета
  /accounts:
    get:
      tags:
        - Accounts
      summary: Получить список счетов
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: user_id
          in: query
          description: Фильтр по пользователю
          required: false
          schema:
            $ref: '#/components/schemas/ID'
        - name: type
          in: query
          description: Фильтр по типу счета
          required: false
          schema:
            $ref: '#/components/schemas/AccountType'
      responses:
        '200':
          description: Список счетов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsList'

    post:
      tags:
        - Accounts
      summary: Создать счет
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: Счет создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'

  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Получить счет по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Данные счета
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'

    put:
      tags:
        - Accounts
      summary: Обновить счет
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
      responses:
        '200':
          description: Счет обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'

    delete:
      tags:
        - Accounts
      summary: Удалить счет
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Счет удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Категории
  /categories:
    get:
      tags:
        - Categories
      summary: Получить список категорий
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: type
          in: query
          description: Фильтр по типу категории
          required: false
          schema:
            $ref: '#/components/schemas/CategoryType'
        - name: parent_id
          in: query
          description: Фильтр по родительской категории
          required: false
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Список категорий
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesList'

    post:
      tags:
        - Categories
      summary: Создать категорию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Категория создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Получить категорию по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Данные категории
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

    delete:
      tags:
        - Categories
      summary: Удалить категорию
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Категория удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Транзакции
  /transactions:
    get:
      tags:
        - Transactions
      summary: Получить список транзакций
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/DateFromParam'
        - $ref: '#/components/parameters/DateToParam'
        - name: account_id
          in: query
          description: Фильтр по счету
          required: false
          schema:
            $ref: '#/components/schemas/ID'
        - name: category_id
          in: query
          description: Фильтр по категории
          required: false
          schema:
            $ref: '#/components/schemas/ID'
        - name: type
          in: query
          description: Фильтр по типу транзакции
          required: false
          schema:
            $ref: '#/components/schemas/TransactionType'
        - name: user_id
          in: query
          description: Фильтр по пользователю
          required: false
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Список транзакций
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsList'

    post:
      tags:
        - Transactions
      summary: Создать транзакцию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: Транзакция создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Получить транзакцию по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Данные транзакции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

    put:
      tags:
        - Transactions
      summary: Обновить транзакцию
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransactionRequest'
      responses:
        '200':
          description: Транзакция обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

    delete:
      tags:
        - Transactions
      summary: Удалить транзакцию
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Транзакция удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Бюджеты
  /budgets:
    get:
      tags:
        - Budgets
      summary: Получить список бюджетов
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: period
          in: query
          description: Фильтр по периоду
          required: false
          schema:
            $ref: '#/components/schemas/BudgetPeriod'
        - name: category_id
          in: query
          description: Фильтр по категории
          required: false
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Список бюджетов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetsList'

    post:
      tags:
        - Budgets
      summary: Создать бюджет
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBudgetRequest'
      responses:
        '201':
          description: Бюджет создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'

  /budgets/{id}:
    get:
      tags:
        - Budgets
      summary: Получить бюджет по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Данные бюджета
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'

    put:
      tags:
        - Budgets
      summary: Обновить бюджет
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBudgetRequest'
      responses:
        '200':
          description: Бюджет обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'

    delete:
      tags:
        - Budgets
      summary: Удалить бюджет
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Бюджет удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Цели
  /goals:
    get:
      tags:
        - Goals
      summary: Получить список целей
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: is_completed
          in: query
          description: Фильтр по статусу выполнения
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Список целей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalsList'

    post:
      tags:
        - Goals
      summary: Создать цель
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGoalRequest'
      responses:
        '201':
          description: Цель создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'

  /goals/{id}:
    get:
      tags:
        - Goals
      summary: Получить цель по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Данные цели
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'

    put:
      tags:
        - Goals
      summary: Обновить цель
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGoalRequest'
      responses:
        '200':
          description: Цель обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'

    delete:
      tags:
        - Goals
      summary: Удалить цель
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Цель удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /goals/{id}/contribute:
    post:
      tags:
        - Goals
      summary: Пополнить цель
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: string
                  pattern: '^-?\d+(\.\d{1,2})?'
                description:
                  type: string
                  maxLength: 500
      responses:
        '200':
          description: Цель пополнена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'

  # Аналитика и отчеты
  /analytics/overview:
    get:
      tags:
        - Analytics
      summary: Общий обзор финансов
      parameters:
        - $ref: '#/components/parameters/DateFromParam'
        - $ref: '#/components/parameters/DateToParam'
      responses:
        '200':
          description: Общий обзор
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_income:
                    type: string
                    pattern: '^-?\d+(\.\d{1,2})?'
                  total_expense:
                    type: string
                    pattern: '^-?\d+(\.\d{1,2})?'
                  balance:
                    type: string
                    pattern: '^-?\d+(\.\d{1,2})?'
                  accounts_balance:
                    type: string
                    pattern: '^-?\d+(\.\d{1,2})?'
                  transactions_count:
                    type: integer
                  budget_usage:
                    type: number
                    format: float
                  goals_progress:
                    type: number
                    format: float

  /analytics/expenses-by-category:
    get:
      tags:
        - Analytics
      summary: Расходы по категориям
      parameters:
        - $ref: '#/components/parameters/DateFromParam'
        - $ref: '#/components/parameters/DateToParam'
        - name: limit
          in: query
          description: Количество категорий
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Расходы по категориям
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          $ref: '#/components/schemas/Category'
                        amount:
                          type: string
                          pattern: '^-?\d+(\.\d{1,2})?'
                        percentage:
                          type: number
                          format: float
                        transactions_count:
                          type: integer

  /analytics/income-expense-trend:
    get:
      tags:
        - Analytics
      summary: Тренд доходов и расходов
      parameters:
        - $ref: '#/components/parameters/DateFromParam'
        - $ref: '#/components/parameters/DateToParam'
        - name: period
          in: query
          description: Период группировки
          required: false
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Тренд доходов и расходов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period:
                          type: string
                        income:
                          type: string
                          pattern: '^-?\d+(\.\d{1,2})?'
                        expense:
                          type: string
                          pattern: '^-?\d+(\.\d{1,2})?'
                        balance:
                          type: string
                          pattern: '^-?\d+(\.\d{1,2})?'

  /analytics/accounts-balance:
    get:
      tags:
        - Analytics
      summary: Баланс по счетам
      responses:
        '200':
          description: Баланс по счетам
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        account:
                          $ref: '#/components/schemas/Account'
                        balance:
                          type: string
                          pattern: '^-?\d+(\.\d{1,2})?'
                        percentage:
                          type: number
                          format: float

tags:
  - name: Authentication
    description: Аутентификация и авторизация
  - name: Users
    description: Управление пользователями
  - name: Families
    description: Управление семьями
  - name: Accounts
    description: Управление счетами
  - name: Categories
    description: Управление категориями
  - name: Transactions
    description: Управление транзакциями
  - name: Budgets
    description: Управление бюджетами
  - name: Goals
    description: Управление финансовыми целями
  - name: Analytics
    description: Аналитика и отчеты